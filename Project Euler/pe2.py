# Author : BIZZOZZERO Nicolas
# Completed on Sun, 24 Jan 2016, 22:24
#
# This program find the solution of the problem 2 of the Project Euler.
# The problem is the following :
#
# Each new term in the Fibonacci sequence is generated by adding the previous
# two terms.By starting with 1 and 2, the first 10 terms will be:
# 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
# By considering the terms in the Fibonacci sequence whose values do not
# exceed four million, find the sum of the even-valued terms.
#
# The answer to this problem is :
# 4613732

from math import sqrt


def fibonacci(n: int) -> int:
    """Return the n-th value of the Fibonacci serie in constant time.
        The Fibonacci serie is defined as follow:
        fibonacci(0) = 0
        fibonacci(1) = 1
        fibonacci(n) = fibonacci(n - 1) + fibonacci(n - 2)
        This function use a formula to approximate the n-th value of the
        Fibonacci serie.
    """
    sqrt_5 = sqrt(5)
    return round(
        (pow((1 + sqrt_5) / 2, n) -
         pow((1 - sqrt_5) / 2, n)) / sqrt_5)


def is_even(n: int) -> bool:
    """Return True if n is even, False otherwise. """
    return bin(n).endswith("0")


def main():
    sum_of_even_terms = 0
    n = 0
    nth_fibonacci_term = 0
    while nth_fibonacci_term < 4000000:
        nth_fibonacci_term = fibonacci(n)
        if (is_even(nth_fibonacci_term)):
            sum_of_even_terms += nth_fibonacci_term
        n += 1
    print(sum_of_even_terms)


if __name__ == '__main__':
    main()
